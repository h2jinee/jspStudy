jsp 공부를 위한 공간

✅ JSP란?
Java Server Pages : HTML 코드에 JAVA 코드를 넣어 동적웹페이지를 생성하는 웹어플리케이션 도구이다.
                    JSP 가 실행되면 자바 서블릿(Servlet) 으로 변환되며 웹 어플리케이션 서버에서 동작되면서 필요한 기능을 수행하고 그렇게 생성된 데이터를 웹페이지와 함께 클라이언트로 응답한다.

출처: https://javacpro.tistory.com/43 [버물리의 IT공부]

✅ get / post 방식

1. GET방식

[ GET방식의 특징]
URL에 변수(데이터)를 포함시켜 요청한다.
데이터를 Header(헤더)에 포함하여 전송한다.
URL에 데이터가 노출되어 보안에 취약하다.
전송하는 길이에 제한이 있다.
캐싱할 수 있다.

2. POST방식

[ POST방식의 특징 ]
URL에 변수(데이터)를 노출하지 않고 요청한다.
데이터를 Body(바디)에 포함시킨다.
URL에 데이터가 노출되지 않아서 기본 보안은 되어있다.
전송하는 길이에 제한이 없다.
캐싱할 수 없다.

Q) Cashing(캐싱)이란?
캐싱이란 한번 접근 후, 또 요청할시 빠르게 접근하기 위해 레지스터에 데이터를 저장시켜 놓는 것.

✅ 서블릿(Servlet)
: 웹프로그래밍에서 클라이언트의 요청을 처리하고 그 결과를 다시 클라이언트에게 전송하는 Servlet 클래스의 구현 규칙을 지킨 자바 프로그래밍 기술

간단히 말해서, 서블릿이란 자바를 사용하여 웹을 만들기 위해 필요한 기술입니다. 그런데 좀더 들어가서 설명하자면 
클라이언트가 어떠한 요청을 하면 그에 대한 결과를 다시 전송해주어야 하는데, 이러한 역할을 하는 자바 프로그램입니다. 
예를 들어, 어떠한 사용자가 로그인을 하려고 할 때. 사용자는 아이디와 비밀번호를 입력하고, 로그인 버튼을 누릅니다. 
그때 서버는 클라이언트의 아이디와 비밀번호를 확인하고, 다음 페이지를 띄워주어야 하는데, 이러한 역할을 수행하는 
것이 바로 서블릿(Servlet)입니다.

[ Servlet 특징 ]
클라이언트의 요청에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트
html을 사용하여 요청에 응답한다.
Java Thread를 이용하여 동작한다.
MVC 패턴에서 Controller로 이용된다.
HTTP 프로토콜 서비스를 지원하는 javax.servlet.http.HttpServlet 클래스를 상속받는다. UDP보다 속도가 느리다.
HTML 변경 시 Servlet을 재컴파일해야 하는 단점이 있다.

https://mangkyu.tistory.com/14?category=761303

✅
<%@ %> : 지시자(page, include, taglib)
<% %>   : 스크립틀릿(scriptlet)
<%= %> : 표현식
자바식 이 대입될수 있고 자바식은 상수나 변수 이름, 연산자를 포함한 식 또는 리턴 값이 있는 메서드 호출식이 될 수도 있다.

출처: https://leechwin.tistory.com/entry/JSP-Scriptlet [Library of developer]

✅
동적바인딩 : 런타임 시에 알 수 있는 것.
정적바인딩 : 컴파일 시에 알 수 있는 것.

✅
동기방식 (Synchronous) : 요청을 보낸 후 응답(결과)를 받아야지만 다음 동작이 이루어지는 방식. 시스템의 전체적인 효율이 저하됨.
비동기방식 (Asynchronous) : 요청을 보낸 후 응답(결과)와는 상관없이 다음 방식이 동작하는 방식. 

<장단점>
동기방식은 설계가 매우 간단하고 직관적이지만 결과가 주어질 때까지 아무것도 못하고 대기해야 하는 단점이 있고,
비동기방식은 동기보다 복잡하지만 결과가 주어지는데 시간이 걸리더라도 그시간동안 다른 작업을 할 수 있으므로 자원을 효율적으로 사용할 수 있다.

✅
Contect : <%=request.getContextPath()%>
URI : <%=request.getRequestURI()%>
URL : <%=request.getRequestURL()%>
Path : <%=request.getServletPath()%>

✅
request.getContextPath() : 프로젝트 path만 얻어온다.
예) http://localhost:8081/board/list.jsp
     return: /board

request.getRequestURI() : 프로젝트와 파일경로까지 얻어온다.
예) http://localhost:8081/board/list.jsp
     return: /board/list.jsp

String url = request.getRequestURI.split("/");
String fName = url[url.length -1]; //list.jsp

//
✅
Server Options 섹션에서 'Serve modules without publishing'을 체크하게 되면..

페이지의 수정사항이 별도의 폴더에 복사되기를 기다릴 필요 없이 바로 확인할 수 있습니다.

주의: 이 옵션을 사용하게 되면 자바 클래스가 변경 되었을 때 어플리케이션이 자동으로 reloading 되지 않게 됩니다.
웹 프로젝트를 디버그 모드로 실행할 경우에 메소드안의 내용이 바뀌는 경우에는 자동으로 반영이 되지만 메소드나 필드가
추가되는 등의 변경이 일어날 경우에는 반영이 안되기 때문에 서버를 재시작해야 한는 문제가 있습니다.

만일 디버그 모드로 실행 중이 아니라면 메소드안의 내용이 바뀌어도 자동으로 반영되지 않습니다.
따라서 자바클래스의 메소드나 필드가 빈번히 추가/삭제 되는 경우라면 이 옵션을 사용하지 않는 것이 좋으며
이 옵션을 사용시에는 디버그모드로 실행하는 것이 좋습니다.

이클립스에서 JSP 나 XHTML 가 열려있는 상태라면 간단히 F11 단축키만을 사용해서 디버그 모드로 바로 실행해볼 수 있습니다.


-----------------------------------------------------------------------

✅ forward()
: - forward 액션 태그는 다른 페이지로 프로그램의 제어를 이동할 때 사용되는 액션 태그이다.
- JSP 페이지 내에 forward 액션 태그를 만나게 되면, 그전까지 출력 버퍼에 저장되어 있던 내용을 제거하고 forward 액션 태그가 지정하는 페이지로 이동한다.

✅ 포워딩(Forwarding)
: 어떠한 요청을 받았을 때 그것을 직접 처리하지 않고 다른 쪽으로 위임하는 것.

포워딩은 JSP서블릿에서 2가지 클래스를 이용한다. (RequestDispatcher 클래스, HttpServletResponse 클래스)

1. RequestDispatcher 클래스
이 클래스는 요청 받은 요청객체(request)를 위임하는 컴포넌트에 동일하게 전달 할 수 있다.
서블릿에서 id값과 pw값을 setAttribute 시켜주고 jsp파일로 포워딩 하게되면 (이때 request객체와 response객체를 같이 보내줌)
jsp에서 getAttribute로 id값과 pw값을 받음. 이후에 브라우져에서 출력값을 확인해보면 주소창은 
java파일에서 실행 시켰기 때문에 java파일명이지만 화면은 jsp인 것을 확인 할 수 있다.

2. HttpServletResponse
HttpServletResponse 클래스는 RequestDispatcher 클래스와 동일하게 요청을 위임하는 클래스이다.
다만 차이점은 요청 받은 요청 객체를 위임받은 컴포넌트에 전달 하는 것이 아닌 새로운 요청 객체를 생성한다.
테스트 해볼 경우 브라우져에 id와 pw값이 null로 뜨는 것을 볼 수 있다. 이것은 요청객체를 위임 받은 컴포넌트에 전달하는 것이 아닌
'새로운' 요청객체를 생성한다는 것을 증명한다.

출처 : https://rwd337.tistory.com/33?category=650715

✅ @WebServlet 이란
@WebServlet의 속성 값을 통해 해당 Servlet과 매핑될 URL 패턴을 지정한다.
이 Annotation을 통해 web.xml 파일에 별로의 설정을 하지 않더라도 해당 Servlet을 실행할 수 있다.

@WebServlet의 속성들
name
서블릿의 이름을 설정하는 속성
@WebServlet(name = “서블릿 이름”)
urlPatterns
서블릿의 URL 목록을 설정하는 속성
@WebServlet(urlPatterns = “/”)
@WebServlet(urlPatterns = {“/”})
@WebServlet(urlPatterns = {“/”, “/home”, “/webcome”})
value
urlPatterns와 동일한 기능을 한다.
value는 속성 이름 없이 값만 설정할 수 있다.
@WebServlet(“/calc”)
value 속성 외에 다른 속성의 값도 필요한 경우는 속성의 이름을 생략할 수 없다.

https://gmlwjd9405.github.io/2018/12/22/webservlet-annotation.html

✅ 세션(Session)이란?

세션은 쿠키와 다르게 사용자의 정보가 서버에 저장된다.
세션을 클라이언트마다 개별적으로 유지하기 위해 HttpSession 객체가 생성될때
요청을 보내온 클라리언트 정보, 요청시간 정보 등을 조합한 세션ID가 부여되며 이 세션ID가 쿠키 기술로 저장된다.

✅ 속성 처리 메소드
        
                메소드                     리턴타입                        설명
-----------------------------------------------------------------------------------------------------------------------------------------
setAttribute(String name, Object value)     void      이름이 name인 속성의 값을 value로 지정합니다.
getAttribute(String name)                  Object     이름이 name인 속성의 값을 구함. 지정한 이름의 속성이 존재하지 않을 경우 null 리턴.
removeAttribute(String name)                void      이름이 name인 속성을 삭제
getAttributeNames()                 java.util.Enumeration   속성의 이름 목록을 구함

✅ 어노테이션이란 ?

- @를 이용한 주석, 자바코드에 주석을 달아 특별한 의미를 부여한 것
- 컴파일러가 특정 오류를 억제하도록 지시하는 것과 같이 프로그램 코드의 일부가 아닌 프로그램에
  관한 데이터를 제공, 코드에 정보를 추가하는 정형화된 방법.
  
✅ 어노테이션의 용도

- @Override 어노테이션처럼 컴파일러를 위한 정보를 제공하기 위한 용도
- 스프링 프레임워크의 @Controller 어노테이션처럼 런타임에 리플렉션을 이용해서 특수 기능을 추가하기 위한 용도
- 컴파일 과정에 어노테이션 정보로부터 코드를 생성하기 위한 용도

✅ 기본 어노테이션(JDK에서 제공)

- @Override: 해당 메소드가 부모 클래스에 있는 메소드를 재정의했다는 것을 명시적으로 선언
- @Deprecated: 더이상 사용되지 않는 클래스나 메소드 앞에 추가
- @SuppressWarnings: 프로그램에는 문제가 없는데 간혹 컴파일러가 경고를 뿜을 때가 있는데, 이를 무시하라고 프로그래머에게 알려줌

출처: https://sjh836.tistory.com/8 [빨간색코딩]

-------------------------------------------------------------------------------------------------------------

💥 MVC 패턴 (Model1방식, Model2방식)

Model - 데이터 처리 (dao, dto)와 같은 클래스를 만들어서 처리한다.
View - 화면 출력 (jsp)
Controller - 흐름 제어 (servlet)

* Model1 방식
- 사용자의 요청을 JSP가 전부 다 처리함. 
  웹브라우저 사용자의 요청을 받은 JSP는 자바빈이나 서비스 클래스를 사용하여 웹브라우저가 요청한 작업을 처리하고 그 결과를 출력

* Model2 방식
- 웹브라우저 사용자의 요청을 서블릿이 받고 서블릿은 View로 보여줄 것인지 Model로 보내줄 것인지 정하여 전송해준다. 
  여기서 View페이지는 사용자에게 보여주는 역할만 담당하고 실질적인 기능의 부분은 Model에서 담당한다. 
  실질적으로 보여지는 HTML과 JAVA소스를 분리해놓았기 때문에 Model1방식에 비해 개발을 확장시키기도 쉽고 유지보수하기도 쉽다. (더 깔끔하게 코딩 가능)

✅ servlet 생명주기 (life Cycle)
   
   (최초 요청 시 한 번만)           (요청 시 매번)                (마지막 한 번)
- servlet객체 생성 → init() → service(), doGet(), doPost() 호출 → destory() 호출 

* 객체 생성 시 매번 새로운 Thread를 할당

1. 요청(request)이 오면 Servlet 클래스가 로딩되어 요청에 대한 Servlet 객체가 생성된다.
2. 서버는 init() 메소드를 호출해서 servlet을 초기화한다.
3. service() 메소드를 호출해서 servlet이 브라우저의 요청을 처리하도록 한다.
4. service() 메소드는 특정 HTTP 요청(GET, POST 등)을 처리하는 메서드 (doGet(), doPost() 등)를 호출한다.
5. 서버는 destroy()메소드를 호출하여 servlet을 제거한다.

✅ servlet-mapping

매핑은 URL에서 지정해준 이름 (ex. <servlet-name>name</servlet-name>)을 타이핑하면
위에 등록한 서블릿을 실행하겠다는 것이다. 위에서 선언한 서블릿 이름과 동일하게 해야함.

✅ Logging(로깅)

로깅이란 프로그램을 개발하거나 운영할 때 생기는 문제점을 관리하고 모니터링 할 수 있는 데이터를 말한다.
일반적인 로깅은 기록을 남기는 것을 뜻하는데 자바에서의 로깅도 비슷한 개념으로 관리자에게 보여주는 메세지가 아닌
기록의 형태, 파일같은 형태를 뜻한다.

로깅이 사용되는 예로는 DataBase연결 결과 피드백, 웹 페이지 전환 시 파라미터 전달 결과의 피드백,
특정 메소드의 호출 결과 피드백 등이 있다.

