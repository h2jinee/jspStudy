jsp 공부를 위한 공간

JSP란?
Java Server Pages : HTML 코드에 JAVA 코드를 넣어 동적웹페이지를 생성하는 웹어플리케이션 도구이다.
                    JSP 가 실행되면 자바 서블릿(Servlet) 으로 변환되며 웹 어플리케이션 서버에서 동작되면서 필요한 기능을 수행하고 그렇게 생성된 데이터를 웹페이지와 함께 클라이언트로 응답한다.

출처: https://javacpro.tistory.com/43 [버물리의 IT공부]

get / post 방식
: 

servlet
:

<%@ %> : 지시자(page, include, taglib)
<% %>   : 스크립틀릿(scriptlet)
<%= %> : 표현식
자바식 이 대입될수 있고 자바식은 상수나 변수 이름, 연산자를 포함한 식 또는 리턴 값이 있는 메서드 호출식이 될 수도 있다.

출처: https://leechwin.tistory.com/entry/JSP-Scriptlet [Library of developer]

동적바인딩 : 런타임 시에 알 수 있는 것.
정적바인딩 : 컴파일 시에 알 수 있는 것.

Contect : <%=request.getContextPath()%>
URI : <%=request.getRequestURI()%>
URL : <%=request.getRequestURL()%>
Path : <%=request.getServletPath()%>

request.getContextPath() : 프로젝트 path만 얻어온다.
예) http://localhost:8081/board/list.jsp
     return: /board

request.getRequestURI() : 프로젝트와 파일경로까지 얻어온다.
예) http://localhost:8081/board/list.jsp
     return: /board/list.jsp

String url = request.getRequestURI.split("/");
String fName = url[url.length -1]; //list.jsp

//
Server Options 섹션에서 'Serve modules without publishing'을 체크하게 되면..

페이지의 수정사항이 별도의 폴더에 복사되기를 기다릴 필요 없이 바로 확인할 수 있습니다.

주의: 이 옵션을 사용하게 되면 자바 클래스가 변경 되었을 때 어플리케이션이 자동으로 reloading 되지 않게 됩니다.
웹 프로젝트를 디버그 모드로 실행할 경우에 메소드안의 내용이 바뀌는 경우에는 자동으로 반영이 되지만 메소드나 필드가
추가되는 등의 변경이 일어날 경우에는 반영이 안되기 때문에 서버를 재시작해야 한는 문제가 있습니다.

만일 디버그 모드로 실행 중이 아니라면 메소드안의 내용이 바뀌어도 자동으로 반영되지 않습니다.
따라서 자바클래스의 메소드나 필드가 빈번히 추가/삭제 되는 경우라면 이 옵션을 사용하지 않는 것이 좋으며
이 옵션을 사용시에는 디버그모드로 실행하는 것이 좋습니다.

이클립스에서 JSP 나 XHTML 가 열려있는 상태라면 간단히 F11 단축키만을 사용해서 디버그 모드로 바로 실행해볼 수 있습니다.


-----------------------------------------------------------------------

forward()
: - forward 액션 태그는 다른 페이지로 프로그램의 제어를 이동할 때 사용되는 액션 태그이다.
- JSP 페이지 내에 forward 액션 태그를 만나게 되면, 그전까지 출력 버퍼에 저장되어 있던 내용을 제거하고 forward 액션 태그가 지정하는 페이지로 이동한다.

포워딩(Forwarding)
: 어떠한 요청을 받았을 때 그것을 직접 처리하지 않고 다른 쪽으로 위임하는 것.

포워딩은 JSP서블릿에서 2가지 클래스를 이용한다. (RequestDispatcher 클래스, HttpServletResponse 클래스)

1. RequestDispatcher 클래스
이 클래스는 요청 받은 요청객체(request)를 위임하는 컴포넌트에 동일하게 전달 할 수 있다.
서블릿에서 id값과 pw값을 setAttribute 시켜주고 jsp파일로 포워딩 하게되면 (이때 request객체와 response객체를 같이 보내줌)
jsp에서 getAttribute로 id값과 pw값을 받음. 이후에 브라우져에서 출력값을 확인해보면 주소창은 
java파일에서 실행 시켰기 때문에 java파일명이지만 화면은 jsp인 것을 확인 할 수 있다.

2. HttpServletResponse
HttpServletResponse 클래스는 RequestDispatcher 클래스와 동일하게 요청을 위임하는 클래스이다.
다만 차이점은 요청 받은 요청 객체를 위임받은 컴포넌트에 전달 하는 것이 아닌 새로운 요청 객체를 생성한다.
테스트 해볼 경우 브라우져에 id와 pw값이 null로 뜨는 것을 볼 수 있다. 이것은 요청객체를 위임 받은 컴포넌트에 전달하는 것이 아닌
'새로운' 요청객체를 생성한다는 것을 증명한다.

출처 : https://rwd337.tistory.com/33?category=650715

@WebServlet 이란
@WebServlet의 속성 값을 통해 해당 Servlet과 매핑될 URL 패턴을 지정한다.
이 Annotation을 통해 web.xml 파일에 별로의 설정을 하지 않더라도 해당 Servlet을 실행할 수 있다.

@WebServlet의 속성들
name
서블릿의 이름을 설정하는 속성
@WebServlet(name = “서블릿 이름”)
urlPatterns
서블릿의 URL 목록을 설정하는 속성
@WebServlet(urlPatterns = “/”)
@WebServlet(urlPatterns = {“/”})
@WebServlet(urlPatterns = {“/”, “/home”, “/webcome”})
value
urlPatterns와 동일한 기능을 한다.
value는 속성 이름 없이 값만 설정할 수 있다.
@WebServlet(“/calc”)
value 속성 외에 다른 속성의 값도 필요한 경우는 속성의 이름을 생략할 수 없다.

https://gmlwjd9405.github.io/2018/12/22/webservlet-annotation.html
