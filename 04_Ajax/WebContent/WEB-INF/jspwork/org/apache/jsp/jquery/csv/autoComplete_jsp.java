/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-12-17 06:06:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery.csv;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class autoComplete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>ajax::jquery::autoComplete</title>\n");
      out.write("<style>\n");
      out.write("div.wrapper{position: relative;}\n");
      out.write("ul#autoComplete{background-color: white; min-width: 159px; border: 1px solid gray; position: absolute; top: 22px; padding:0; margin:0;}\n");
      out.write("ul#autoComplete li{padding:0 10px; list-style:none; cursor:pointer;}\n");
      out.write("ul#autoComplete li.sel{background:lightseagreen; color:white;}\n");
      out.write("span.srchval{color:red;}\n");
      out.write("</style>\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/jquery/jquery-3.4.1.js\"></script>\n");
      out.write("<script>\n");
      out.write("$(function(){\n");
      out.write("    \n");
      out.write("    var $autoComplete = $(\"#autoComplete\");\n");
      out.write("    $autoComplete.hide(); // 페이지 최초 로딩시 조회결과 ul태그는 안보임 처리한다\n");
      out.write("    \n");
      out.write("    $(\"#srchName\").on('keyup', function(e){\n");
      out.write("        // 방향키 제어 ArrowDown, ArrowUp, Enter\n");
      out.write("        console.log(e.key);\n");
      out.write("        \n");
      out.write("        var $sel = $(\".sel\");\n");
      out.write("        var $li = $autoComplete.children(\"li\");\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        if(e.key == 'ArrowDown'){\n");
      out.write("            \n");
      out.write("            if($sel.length == 0){\n");
      out.write("                $li.first().addClass(\"sel\");\n");
      out.write("            }\n");
      out.write("            else{\n");
      out.write("                $sel.removeClass(\"sel\")\n");
      out.write("                \t.next()\n");
      out.write("                \t.addClass(\"sel\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else if(e.key == 'ArrowUp'){\n");
      out.write("            if($sel.length != 0){\n");
      out.write("                $sel.removeClass(\"sel\")\n");
      out.write("                \t.prev()\n");
      out.write("                \t.addClass(\"sel\");\n");
      out.write("            }\n");
      out.write("            else{\n");
      out.write("                $li.last().addClass(\"sel\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        else if(e.key == 'Enter'){\n");
      out.write("            $(this).val($sel.text());\n");
      out.write("            $autoComplete.hide()\n");
      out.write("            \t\t\t .children()\n");
      out.write("            \t\t\t .remove();\n");
      out.write("        }\n");
      out.write("        else{\n");
      out.write("            \n");
      out.write("            var srchNameVal = $(this).val().trim();\n");
      out.write("                \n");
      out.write("            //공백 입력시 ajax요청 보내지 않음.\n");
      out.write("            if(srchNameVal.length == 0) return;\n");
      out.write("            \n");
      out.write("            $.ajax({\n");
      out.write("                url: \"");
      out.print(request.getContextPath());
      out.write("/jquery/autoComplete\",\n");
      out.write("                type: \"post\",\n");
      out.write("                //data: \"srchName=\"+srchNameVal,\n");
      out.write("                data: {srchName: srchNameVal},//객체로 전달해도 jquery가 직렬화처리\n");
      out.write("                success: function(data){\n");
      out.write("                    console.log(data);\n");
      out.write("                    //조회된 결과가 없는경우\n");
      out.write("                    if(data.trim().length==0){\n");
      out.write("                        \n");
      out.write("                    }\n");
      out.write("                    // 조회결과가 있는 경우\n");
      out.write("                    else{\n");
      out.write("                        var dataArr = data.split(',');\n");
      out.write("                        var html = \"\";\n");
      out.write("                        $.each(dataArr, (idx, val)=>{\n");
      out.write("                            // html += \"<li>\" + val + \"</li>\";\n");
      out.write("                            html += \"<li>\" + val.replace(srchNameVal, '<span class=\"srchval\">'+ srchNameVal + '</span>') + \"</li>\"\n");
      out.write("                        });\n");
      out.write("                         $autoComplete.html(html).fadeIn(300);\n");
      out.write("                        \n");
      out.write("                    }\n");
      out.write("                },\n");
      out.write("                error: function(jqxhr, textStatus, errorThrown){\n");
      out.write("                    console.log(\"ajax처리실패!\", jqxhr, textStatus, errorThrown);\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("                \n");
      out.write("        } // end of Ajax\n");
      out.write("        \n");
      out.write("        //이벤트버블링(자식 => 부모)을 이용한 처리\n");
      out.write("        //요소를 선택한 경우\n");
      out.write("        $autoComplete.on('click', 'li', e => {\n");
      out.write("        \t//화살표함수 내에서 this는 무조건 window\n");
      out.write("            $(\"#srchName\").val($(e.target).text());\n");
      out.write("            $autoComplete.hide()\n");
      out.write("            \t\t\t .children()\n");
      out.write("            \t\t\t .remove();\n");
      out.write("        }).on('mouseover','li', e=>{\n");
      out.write("        \t$(e.target).addClass(\"sel\")\n");
      out.write("        \t\t\t   .siblings()\n");
      out.write("        \t\t\t   .removeClass(\"sel\");\n");
      out.write("        \t\n");
      out.write("        }).on('mouseout','li', e=>{\n");
      out.write("        \t$(e.target).removeClass(\"sel\");\n");
      out.write("        });\n");
      out.write("   });\n");
      out.write("});\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <h1>ajax::jquery::autoComplete</h1>\n");
      out.write("    <h2>친구 검색</h2>\n");
      out.write("    <div class=\"wrapper\">\n");
      out.write("        <input type=\"text\" id=\"srchName\" />\n");
      out.write("        \n");
      out.write("        <ul id=\"autoComplete\"></ul>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
