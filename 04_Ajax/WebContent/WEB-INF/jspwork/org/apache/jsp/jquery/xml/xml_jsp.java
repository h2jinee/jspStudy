/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-12-17 04:09:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jquery.xml;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class xml_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ajax::jquery::xml</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/jquery/jquery-3.4.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("table, td, th{\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("}\r\n");
      out.write("img {width: 100px;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$(\"#btn\").click(e=>{\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"sample.xml\",\r\n");
      out.write("\t\t\ttype: \"get\",\r\n");
      out.write("\t\t\tdataType: \"xml\",\r\n");
      out.write("\t\t\tsuccess: data => {\r\n");
      out.write("\t\t\t\t//console.log(data);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar $root = $(data).find(\":root\");\r\n");
      out.write("\t\t\t\tconsole.log($root.prop(\"tagName\")); //태그명 가져오기 prop\r\n");
      out.write("\t\t\t\tconsole.log($root.attr(\"myattr\")); //속성명 가져오기 attr\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar $bookArr = $root.find(\"book\");\r\n");
      out.write("\t\t\t\tconsole.log($bookArr);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tlet fictionInfo = \"<tr><td>제목</td><td>저자</td></tr>\";\r\n");
      out.write("\t\t\t\tlet itInfo = \"<tr><td>제목</td><td>저자</td></tr>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$bookArr.each((idx,book)=>{\r\n");
      out.write("\t\t\t\t\tconsole.log(idx, book);\r\n");
      out.write("\t\t\t\t\tlet html = \"<tr><td>\"+$(book).find(\"title\").text()+\"</td>\";\r\n");
      out.write("\t\t\t\t\thtml += \"<td>\"+$(book).find(\"author\").text()+\"</td></tr>\";\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//소설인 경우\r\n");
      out.write("\t\t\t\t\tif($(book).find(\"subject\").text() === '소설'){\r\n");
      out.write("\t\t\t\t\t\tfictionInfo += html;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t//프로그래밍인 경우\r\n");
      out.write("\t\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\t\titInfo += html;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#fictionInfo\").html(fictionInfo);\r\n");
      out.write("\t\t\t\t$(\"#itInfo\").html(itInfo);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: (jqxhr, textStatus, errorThrown)=>{\r\n");
      out.write("\t\t\t\tconsole.log(\"ajax처리실패!\",jqxhr, textStatus, errorThrown);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t//회원정보 가져오기\r\n");
      out.write("\t$(\"#btn-member\").click(e =>{\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"");
      out.print(request.getContextPath());
      out.write("/jquery/xml/member\",\r\n");
      out.write("\t\t\tdataType: \"xml\",\r\n");
      out.write("\t\t\tsuccess: data => {\r\n");
      out.write("\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\tvar $root = $(data).find(\":root\");\r\n");
      out.write("\t\t\t\tvar $memberArr = $root.find(\"member\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar memberInfo = \"<tr><th>프로필</th><th>이름</th><th>전화번호</th></tr>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$memberArr.each((idx,member)=>{\r\n");
      out.write("\t\t\t\t\tlet html = \"<tr><td>\"+$(member).find(\"name\").text()+\"</td>\";\r\n");
      out.write("\t\t\t\t\thtml += \"<td>\"+$(member).find(\"phone\").text()+\"</td>\"\r\n");
      out.write("\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t\thtml += \"<td><img src='");
      out.print(request.getContextPath());
      out.write("/images/\"  +$(member).find(\"profile\").text()+   \"'></td></tr>\"\r\n");
      out.write("\t\t\t\t\tmemberInfo += html;\r\n");
      out.write("\t\t\t\t});;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#memberInfo\").html(memberInfo);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror: (jqxhr, textStatus, errorThrown) => {\r\n");
      out.write("\t\t\t\tconsole.log(\"ajax처리실패!\", jqxhr, textStatus, errorThrown)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>ajax::jquery::xml</h1>\r\n");
      out.write("\t<button id=\"btn\">실행</button>\r\n");
      out.write("\t<div id=\"finction\">\r\n");
      out.write("\t\t<!-- div#finction>h3{소설}+table#fictionInfo -->\r\n");
      out.write("\t\t<h3>소설</h3>\r\n");
      out.write("\t\t<table id=\"fictionInfo\"></table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"finction\">\r\n");
      out.write("\t\t<h3>프로그래밍</h3>\r\n");
      out.write("\t\t<table id=\"itInfo\"></table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>회원정보 가져오기(xml)</h2>\r\n");
      out.write("\t<button id=\"btn-member\">실행</button>\r\n");
      out.write("\t<!-- div#member-container>h3+table#memberInfo -->\r\n");
      out.write("\t<div id=\"member-container\">\r\n");
      out.write("\t\t<h3>회원정보</h3>\r\n");
      out.write("\t\t<table id=\"memberInfo\"></table>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
