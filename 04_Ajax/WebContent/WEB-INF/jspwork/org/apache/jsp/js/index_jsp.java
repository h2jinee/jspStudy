/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.47
 * Generated at: 2019-12-16 03:15:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.js;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>javascript::ajax</title>\r\n");
      out.write("<style>\r\n");
      out.write(".test{\r\n");
      out.write("\twidth: 300px;\r\n");
      out.write("\tmin-height: 50px;\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>javacript::ajax</h1>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<form name=\"memberFrm\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"name\" id=\"name\" placeholder=\"이름\" />\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\t\t<input type=\"number\" name=\"age\" id=\"age\" placeholder=\"나이\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>GET</h2>\r\n");
      out.write("\t<button onclick=\"testGet();\">실행</button>\r\n");
      out.write("\t<p id=\"test1\" class=\"test\"></p>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tvar xhr; //이벤트핸들러함수 참조를 위해 전역변수 선언.\r\n");
      out.write("\t\r\n");
      out.write("\tfunction testGet(){\r\n");
      out.write("\t\t//1. XMLHttpRequest객체 생성\r\n");
      out.write("\t\txhr = getXMLHttpRequest();\r\n");
      out.write("\r\n");
      out.write("\t\tif(xhr == null) return;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//2. 연결 후 연결상태에 따른 이벤트핸들러 바인딩\r\n");
      out.write("\t\txhr.onreadystatechange = function(){\r\n");
      out.write("\t\t\tif(xhr.readyState == 0){\r\n");
      out.write("\t\t\t\tconsole.log(\"readystate=0: uninitialized!\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse if(xhr.readyState == 1){\r\n");
      out.write("\t\t\t\tconsole.log(\"readystate=1: loading!\");\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse if(xhr.readyState == 2){\r\n");
      out.write("\t\t\t\tconsole.log(\"readystate=2: loaded!\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse if(xhr.readyState == 3){\r\n");
      out.write("\t\t\t\tconsole.log(\"readystate=3: interactive!\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\telse if(xhr.readyState == 4){\r\n");
      out.write("\t\t\t\tconsole.log(\"readystate=4: completed!\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(xhr.status == 200){\r\n");
      out.write("\t\t\t\t\tconsole.log(\"ajax 정상 처리됨!!!\");\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tconsole.log(\"xhr.responseTest=\"+xhr.responseText);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tdocument.querySelector(\"#test1\").innerHTML += xhr.responseText;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//초기화\r\n");
      out.write("\t\t\t\t\tdocument.querySelector(\"#name\").value = '';\r\n");
      out.write("\t\t\t\t\tdocument.querySelector(\"#age\").value = '';\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//3. 연결(open)\r\n");
      out.write("\t\t//method, url, ajax비동기여부\r\n");
      out.write("\t\tvar nameVal = document.querySelector(\"#name\").value;\r\n");
      out.write("\t\tvar ageVal = document.querySelector(\"#age\").value;\r\n");
      out.write("\t\txhr.open(\"GET\", \"");
      out.print(request.getContextPath());
      out.write("/js/test?name=\"+nameVal+\"&age=\"+ageVal, true);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//4. 전송\r\n");
      out.write("\t\t//queryString\r\n");
      out.write("\t\txhr.send(null);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t/**\r\n");
      out.write("\t*\tcross-browsing issue 해결해야 함.\r\n");
      out.write("\t*/\r\n");
      out.write("\tfunction getXMLHttpRequest(){\r\n");
      out.write("\t\t//ie인 경우\r\n");
      out.write("\t\tif(window.ActiveXObject){\r\n");
      out.write("\t\t\ttry{\r\n");
      out.write("\t\t\t\t//ie9 이상인 경우\r\n");
      out.write("\t\t\t\treturn new ActiveXObject(\"Msxml2.XMLHTTP\");\r\n");
      out.write("\t\t\t} catch (ex){\r\n");
      out.write("\t\t\t\t//ie8 이하인 경우\r\n");
      out.write("\t\t\t\ttry{\r\n");
      out.write("\t\t\t\t\treturn new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("\t\t\t\t} catch(ex){\r\n");
      out.write("\t\t\t\t\treturn null;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(window.XMLHttpRequest){\r\n");
      out.write("\t\t\treturn new XMLHttpRequest();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t//ie외의 경우\r\n");
      out.write("\t\telse {\r\n");
      out.write("\t\t\treturn null;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t<h2>POST</h2>\r\n");
      out.write("\t<button onclick=\"testPost()\">실행</button>\r\n");
      out.write("\t<p class=\"test\" id=\"test2\"></p>\r\n");
      out.write("\t<script>\r\n");
      out.write("\tfunction testPost(){\r\n");
      out.write("\t\t//1. XMLHttpRequest객체 생성\r\n");
      out.write("\t\txhr = getXMLHttpRequest();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(xhr == null) return;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//2. readyState값 변화에 따른 이벤트핸들러 설치\r\n");
      out.write("\t\txhr.onreadystatechange = function(){\r\n");
      out.write("\t\t\t//completed\r\n");
      out.write("\t\t\tif(xhr.readyState == 4){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(xhr.status == 200){\r\n");
      out.write("\t\t\t\t\tconsole.log(xhr.responseText);\r\n");
      out.write("\t\t\t\t\tdocument.querySelector(\"#test2\").innerHTML += xhr.responseText;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse {\r\n");
      out.write("\t\t\t\t\tconsole.log(\"ajax처리실패!!\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//3. 연결\r\n");
      out.write("\t\t//별도의 Content-type 헤더 작성할 것 : application/x-www-form-urlencoded\r\n");
      out.write("\t\txhr.open(\"POST\", \"");
      out.print(request.getContextPath());
      out.write("/js/test\", true);\r\n");
      out.write("\t\t//open이후 header값 설정\r\n");
      out.write("\t\txhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//4. 전송\r\n");
      out.write("\t\tvar nameVal = document.querySelector(\"#name\").value;\r\n");
      out.write("\t\tvar ageVal = document.querySelector(\"#age\").value;\r\n");
      out.write("\t\txhr.send(\"name=\"+nameVal+\"&age=\"+ageVal);\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
